1.1. Insert the following documents into the movies collection.

create table movies (title varchar(40), writer char(30), year varchar(4), actors text[], franchise varchar(30), synopsis varchar(300));

insert into movies (title, writer, year, actors) values ('Fight Club', 'Chuck Palahniuk', 1999, '{"Brad Pitt", "Edward Norton"}');
insert into movies (title, writer, year, actors) values ('Pulp Fiction', 'Quentin Tarantino', 1994, '{"John Travolta", "Uma Thurman"}');
insert into movies (title, writer, year, actors) values ('Inglorious Basterds', 'Quentin Tarantino', 2009, '{"Brad Pitt", "Diane Kruger", "Eli Roth"}');
insert into movies (title, writer, year, franchise) values ('The Hobbit: An Unexpected Journey', 'J.R.R. Tolkein', 2012, 'The Hobbit'), ('The Hobbit: The Desolation of Smaug', 'J.R.R. Tolkein', 2013, 'The Hobbit');
insert into movies (title, writer, year, franchise, synopsis) values ('The Hobbit: The Battle of the Five Armies', 'J.R.R. Tolkein', 2012, 'The Hobbit', 'Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.');
insert into movies (title) values ('Avatar'), ('Pee Wee Herman's Big Adventure');


1.2.1. Get all the documents.

select * from movies;


1.2.2. Get all documents with `writer` set to "Quentin Tarantino".

select * from movies where writer = 'Quentin Tarantino';


1.2.3. Get all documents where `actors` include "Brad Pitt".

select * from movies where 'Brad Pitt'=ANY(actors);


1.2.4. Get all documents with `franchise` set to "The Hobbit".

select * from movies where franchise = 'The Hobbit';


1.2.5. Get all movies released in the 90s.

select * from movies where year between 1990 and 1999;


1.2.6. Get all movies released before the year 2000 or after 2010.
select * from movies where year < 2000 and year >2010;


1.3.1. Add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug.".

update movies set synopsis = 'A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug.' where title = 'The Hobbit: An Unexpected Journey';


1.3.2. Add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring.".

update movies set synopsis = 'The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring.' where title = 'The Hobbit: The Desolation of Smaug';

1.3.3. Add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction".

update movies set actors = actors || '{"Samuel L. Jackson"}' WHERE title = 'Pulp Fiction';


1.4.1. Find all movies that have a synopsis and contains the word "Bilbo"

select * from movies where synopsis like '%Bilbo%';


1.4.2. Find all movies that have a synopsis and contains the word "Gandalf"

select * from movies where synopsis like '%Gandalf%';


1.4.3. Find all movies that have a synopsis and contains the word "Bilbo" and not the word "Gandalf"

select * from movies where synopsis like '%Bilbo%' and synopsis not like '%Gandalf%';


1.4.4. Find all movies that have a synopsis and contains the word "dwarves" or "hobbit"

select * from movies where synopsis like '%dwarves%'' or synopsis like '%hobbit%'; 


1.4.5. Find all movies that have a synopsis and contains the word "gold" and "dragon"

select * from movies where synopsis like '%gold%'' and synopsis like '%dragon%'; 


1.5.1. Delete the movie "Pee Wee Herman's Big Adventure"

delete from movies where title = 'Pee Wee Herman's Big Adventure';


1.5.2. Delete the movie "Avatar"

delete from movies where title = 'Avatar';






2.1. Insert the following documents into the users collection.

create table users (username varchar(20), firstname char(20), lastname char(20));

insert into users values ('GoodGuyGreg','Good Guy','Greg'), ('ScumbagSteve','Scumbag','Steve');


2.2. Insert the following documents into the posts collection.

create table posts (username varchar(20), title char(60), body char(60));

insert into posts values ('GoodGuyGreg','Passes out at party','Wakes up early and cleans house'), 
						 ('GoodGuyGreg','Steals your identity','Raises your credit score'),
						 ('GoodGuyGreg','Reports a bug in your code','Sends you a Pull Request'), 
						 ('ScumbagSteve','Borrows something','Sells it'), 
						 ('ScumbagSteve','Borrows everything','The end'), 
						 ('ScumbagSteve','Forks your repo on github','Sets to private');


2.3. Insert the following documents into the comments collection.

create table comments (username varchar(20), comment char(60), posts text[]);

insert into comments values ('GoodGuyGreg','Hope you got a good deal!','{"Borrows something"}'), 
						 	('GoodGuyGreg','Whats mine is yours!','{"Borrows everything"}'),
						 	('GoodGuyGreg','Dont violate the licensing agreement!','{"Forks your repo on github"}'), 
						 	('ScumbagSteve','It still is not clean','{"Passes out at party"}'), 
						 	('ScumbagSteve','Denied your PR cause I found a hack','{"Reports a bug in your code"}');


2.4.1. Find all the users.

select * from users;


2.4.2. Find all the posts.

select * from posts;


2.4.3. Find all posts which are authored by "GoodGuyGreg".

select * from posts where username = 'GoodGuyGreg';


2.4.4. Find all posts which are authored by "ScumbagSteve".

select * from posts where username = 'ScumbagSteve';


2.4.5. Find all the comments.

select * from comments;


2.4.6. Find all comments which are authored by "GoodGuyGreg".

select * from comments where username = 'GoodGuyGreg';


2.4.7. Find all comments which are authored by "ScumbagSteve".

select * from comments where username = 'ScumbagSteve';


2.4.8. Find all comments belonging to the post "Reports a bug in your code".

select * from comments where 'Reports a bug in your code'=ANY(posts);





3.1. Insert the following documents into the projects collection.

create table projects (id varchar(3), title char(50), description char(150));

insert into projects values ('P1','Inventory Management System','It is an Inventory Management System'), 
							('P2','Employee Management System','It is an Employee Management System');
							('P3','Project Management System','It is a Project Management System');
							('P4','Medical Information System','It is a Medical Information System');
							('P5','Online Food Ordering System','It is an Online Food Ordering System');


3.2. Insert the following documents into the trainees collection.

create table trainees (fullname char(20), designition char(30), department char(10), techknown text[], pid text[], qualification char(10), college char(20), university char(20), passout varchar(5), contactEmail varchar(30), alternativeEmail varchar(30), isArchieved char(5));

insert into trainees values ('Krushit Dudhat','Trainee Software Engineer','NodeJS','{"NodeJS","Javascript","MongoDB"}', '{"P1","P2","P5"}','B.E/B.Tech','VGEC, Chandkheda','GTU',2022, 'krushit.dudhat@bacancy.com','krushitdudhat2001@gmail.com'), 
('Vinayak Chavan','Trainee Software Engineer','NodeJS','{"NodeJS","Javascript"}', '{"P1","P2"}','B.E/B.Tech','VGEC, Chandkheda','GTU',2022, 'vinayak.chavan@bacancy.com','chavan.vinayak017@gmail.com'),
('Apexa Patel','Trainee Software Engineer','NodeJS','{"NodeJS","Javascript"}', '{"P1","P5"}','B.E/B.Tech','VGEC, Chandkheda','GTU',2022, 'apexa.patel@bacancy.com','apexapatel27321@gmail.com'),
('Manish Rathod",','Trainee Software Engineer','NodeJS','{"NodeJS","MongoDB"}', '{"P2","P3"}','B.E/B.Tech','VGEC, Chandkheda','GTU',2022, 'manish.rathod@bacancy.com','manishkrathod769@gmail.com'),
('Jinay Shah','Trainee Software Engineer','NodeJS','{"NodeJS","Javascript","Java","MongoDB"}', '{"P2","P4"}','MCA','DDU, Nadiad','DDU',2022, 'jinay.shah@bacancy.com','jinay.shah@bacancy.com'),
('Jaykumar Bhatt','Trainee Software Engineer','NodeJS','{"NodeJS","Javascript","C/C++", "MySQL"}', '{"P1","P2","P5"}','B.E/B.Tech','Marwadi University','MU',2022, 'jaykumar.bhatt@bacancy.com','jaybhatt1025@gmail.com'),
('Lav Panchal','Trainee Software Engineer','NodeJS','{"NodeJS","Javascript"}', '{"P1","P2","P3"}','MSC','KS School','GU',2022,'lav.panchal@bacancy.com','lavgpanchal@gmail.com'),
('Kirtan Gadhiya','Trainee Software Engineer','NodeJS','{"NodeJS","Javascript"}', '{"P2","P4"}','B.E/B.Tech','Birla Vishvakarma Mahavidyalaya','GTU',2022, 'kirtan.ghadiya@bacancy.com','kirtan.ghadiya@bacancy.com');


3.3. Insert the following documents into the tasks collection.

create table tasks (title varchar(20), description char(60), pid varchar(3));

insert into tasks values ('P1 - Task 1','P1 - Task 1','P1'), 
						 ('P1 - Task 2','P1 - Task 2','P1'), 
						 ('P2 - Task 2','P2 - Task 2','P2'), 
					   	 ('P2 - Task 2','P2 - Task 2','P2'), 
						 ('P3 - Task 2','P3 - Task 2','P3'), 
						 ('P3 - Task 2','P1 - Task 2','P3'), 
						 ('P4 - Task 1','P4 - Task 1','P4'), 
						 ('P4 - Task 1','P1 - Task 2','P4'), 
						 ('P4 - Task 1','P4 - Task 1','P5'), 
						 ('P4 - Task 1','P1 - Task 2','P5');	


3.3.1. Fetch all the trainees with their project details, the result should only contain the fields: fullName, designation, department, technologiesKnown, projectDetails, primaryEmailID and also display the trainees in ascending order based on the fullName field.

select fullname, designition, department, techknown, contactEmail, pid from trainees order by fullname asc;


3.3.2. Get the count of all the documents of tasks collection.

select count(*) from tasks;


3.3.3. Fetch all the documents of the tasks collection grouped by the projectID field using aggregation.

select title from tasks group by pid;